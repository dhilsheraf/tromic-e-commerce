<%- include("../partials/header.ejs") %>
  <div class="breadcrumb-area breadcrumb-height" data-bg-image="/images/breadcrumb/bg/1-1-1920x400.jpg">
    <div class="container h-100">
      <div class="row h-100">
        <div class="col-lg-12">
          <div class="breadcrumb-item text-night-rider">
            <h2 class="breadcrumb-heading">Order Details</h2>
            <ul>
              <li>
                <a href="/">Home/</a>
              </li>
              <li><a href="/my-account">Order/</a> </li>
              <li>Order Detail</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>
  <main>
    <div class="order-details">
      <h2>ORDER DETAILS</h2>
      <p>OrderId: <%= order._id %>
      </p>
      <p>Date: <%= new Date(order.createdAt).toLocaleDateString() %>
      </p>
      <p>Payment Method: <%= order.payment || 'Not specified' %>
      </p>
      <p <%if(order.paymentStatus == 'Pending'){%>style="color: red;"<%}%> > Payment Status: <%= order.paymentStatus || 'Not specified'%></p>
      <p>Address: <%= order.addressId.addressLine || 'N/A' %>
        <p>Total Price <%= order.totalPrice%></p>
        <p>Price without coupon <%= order.totalPriceWithoutCouponOffer %></p>
      </p>
      <p>Shipping: <%= order.addressId.pincode %>, <%= order.addressId.city %>,
            <%= order.addressId.state %>,
              <%= order.addressId.country %>
      </p>
      <% if (order.paymentStatus === 'Pending' && order.payment === 'razorpay') { %>
        <button class="btn btn-success" onclick="continuePayment('<%= order._id %>')">Continue Payment</button>
    <% } %>   
    <% if(order.paymentStatus === 'completed' && !order.products.some(product => product.status === 'cancelled' )){ %>
      <span><a href="/download-invoice/<%= order._id %>" class="btn btn-danger">Download Invoice</a></span><br><br>
<% }%>
      <h2>Ordered Products</h2>
      <% order.products.forEach(product=> { %>
        <div class="product-row">
          <img src="<%= product.product.images[0] || '/images/default-product.jpg' %>"
            alt="<%= product.product.name %>">
          <div class="product-info">
            <h3>
              <%= product.product.name %>
            </h3>
            <p>Price: ‚Çπ<%= product.price %>
            </p>
            <p>Quantity: <%= product.quantity %>
            </p>
            <p>Total: ‚Çπ<%= product.quantity * product.price %>
            </p>
            
            <% if (product.status==='Pending' && product.status !=='delivered' ) { %>
              <span><button type="submit" class="btn btn-danger"
                  onclick="cancelOrder('<%=order._id %>','<%=product.product._id%>')">Cancel Order</button></span>
              <% } %>
              <% if (product.status === 'delivered') { %>
                <% if (product.reasonForReturn) { %>
                  <span style="color: #c9302c;">Applied for Return</span> 
                <% } else { %>
                  <% if(diff >=  8 ){ %>
                     <span style="color: red;">Order can't be return after 7 Days</span>
                 <% } else { %>
                  <span><button type="button" class="btn btn-warning" onclick="returnOrder('<%= order._id %>', '<%= product.product._id %>')">Return Order</button></span>
                  <%}%>
                <% } %>
              <% } %>
              <% if(product.status === 'return reject') { %>
                <span style="color: red;">Return rejected</span>
              <% } %>
              </div>
              </div>
              <div class="status-container">
                <div class="status-item <%= product.status === 'Pending' ? 'active' : '' %>">
                  <div class="status-icon">üì¶</div>
                  <span class="status-text">Pending</span>
                </div>
                <div class="status-connector <%= product.status === 'shipped' || product.status === 'on delivery' || product.status === 'delivered' || product.status === 'Returned' ? 'active' : '' %>">
                </div>
                <div class="status-item <%= product.status === 'shipped' ? 'active' : '' %>">
                  <div class="status-icon">üöö</div>
                  <span class="status-text">Shipped</span>
                </div>
                <div class="status-connector <%= product.status === 'on delivery' || product.status === 'delivered' || product.status === 'Returned' ? 'active' : '' %>">
                </div>
                <div class="status-item <%= product.status === 'on delivery' ? 'active' : '' %>">
                  <div class="status-icon">üìç</div>
                  <span class="status-text">On Delivery</span>
                </div>
                <div class="status-connector <%= product.status === 'delivered' || product.status === 'Returned' ? 'active' : '' %>">
                </div>
                <div class="status-item <%= product.status === 'delivered' || product.status === 'return reject' ? 'active' : '' %>">
                  <div class="status-icon">‚úÖ</div>
                  <span class="status-text">Delivered</span>
                </div>
                <div class="status-item <%= product.status === 'cancelled' ? 'cancelled' : '' %>">
                  <div class="status-icon">‚ùå</div>
                  <span class="status-text">Cancelled</span>
                </div>
                <div class="status-item <%= product.status === 'return' ? 'returned' : '' %>">
                  <div class="status-icon">‚Ü©Ô∏è</div>
                  <span class="status-text">Returned</span>
                </div>
              </div>
              <% }); %>
              
    </div>
  </main>

  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    async function cancelOrder(orderId, productId) {

      Swal.fire({
        title: "Are you sure",
        text: "The order cant be placed",
        icon: "confirm",

        confirmButtonText: "Confirm",
        showCancelButton: true,
        cancelButtonText: "No keep it",
        cancelButtonColor: "green",
        confirmButtonColor: "red"
      }).then(async (result) => {
        if (result.isConfirmed) {
          try {
            const response = await fetch('/cancel-order', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ orderId, productId })
            });

            const result = await response.json();

            if (response.ok) {
              Swal.fire('Order item cancelled successfull').then(() => {
                location.reload();
              })
            } else {
              swal.fire('Error : ', result.message)
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire('An error occurred while cancelling the order');
          }
        }
      })

    }
  </script>

  <script>
    //return order function
    async function returnOrder(orderId, productId) {
  const { value: reason } = await Swal.fire({
    title: 'Return Order',
    input: 'textarea',
    inputLabel: 'Reason for return',
    inputPlaceholder: 'Enter the reason for returning this order...',
    inputAttributes: {
      'aria-label': 'Enter the reason for return',
    },
    showCancelButton: true,
    confirmButtonText: 'Submit',
    cancelButtonText: 'Cancel',
    inputValidator: (value) => {
      if (!value) {
        return 'Please provide a reason for returning the product.';
      }
    },
  });

  if (reason) {
    try {
      const response = await fetch('/return-order', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderId, productId, reason }),
      });

      const result = await response.json();

      if (response.ok) {
        Swal.fire('Success', 'Your return has been submitted.', 'success').then(() => {
          location.reload();
        });
      } else {
        Swal.fire('Error', result.message || 'An error occurred while submitting the request.', 'error');
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire('Error', 'An error occurred while processing your request.', 'error');
    }
  }
}

async function continuePayment(orderId) {
    try {
        const response = await fetch('/continue-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId }),
        });

        const data = await response.json();

        if (data.success) {
            const options = {
                key: 'rzp_test_eBs0auPt7YNKUD',
                amount: data.totalPrice * 100,
                currency: 'INR',
                name: 'Tromic',
                description: 'Order payment',
                order_id: data.razorpayOrderId,
                handler: function (response) {
                    fetch('/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                        }),
                    })
                    .then((res) => res.json())
                    .then((verificationData) => {
                        if (verificationData.success) {
                            window.location.href = '/order-confirm/' + verificationData.orderId;
                        } else {
                            Swal.fire('Payment verification failed', verificationData.message, 'error');
                        }
                    });
                },
                modal: {
                    ondismiss: function () {
                        Swal.fire({
                            title: 'Payment Incomplete',
                            text: 'You closed the payment window. Please try again.',
                            icon: 'warning',
                            confirmButtonText: 'Retry',
                        });
                    },
                },
                theme: {
                    color: '',
                },
            };

            const rzp1 = new Razorpay(options);
            rzp1.open();
        } else {
            Swal.fire('Error', data.message || 'Unable to initiate payment.', 'error');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An unexpected error occurred.', 'error');
    }
}


  </script>










  <style>
    header {
      color: #fff;
      padding: 1rem;
    }

    header .header-content {
      max-width: 1200px;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    header h1 {
      font-size: 1.5rem;
    }

    /* Main content styles */
    main {
      flex-grow: 1;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
    }

    .order-details {
      background-color: #f5f5f5;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      width: 80%;
      max-width: 600px;
    }

    .order-details h2 {
      font-size: 1.2rem;
      margin-bottom: 1rem;
    }

    .order-details p {
      margin-bottom: 0.5rem;
    }

    .order-details {
      max-width: 800px;
      margin: 20px auto;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
    }

    .product-row {
      display: flex;
      align-items: center;
      gap: 20px;
      margin-bottom: 20px;
    }

    .product-row img {
      width: 120px;
      height: auto;
      border-radius: 8px;
    }

    .product-info {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .product-info h3 {
      margin: 0;
      font-size: 18px;
      color: #333;
    }

    .product-info p {
      margin: 0;
      font-size: 14px;
      color: #666;
    }

    .product-info button {
      padding: 8px 12px;
      background-color: #d9534f;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .product-info button:hover {
      background-color: #c9302c;
    }

    .status-line {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
      border-top: 2px solid #ddd;
      padding-top: 10px;
    }

    .status-container {
      display: flex;
      align-items: center;
      margin: 20px 0;
    }

    .status-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 10px;
      background-color: #ddd;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      text-align: center;
      transition: background-color 0.3s ease;
    }

    .status-item.active {
      background-color: #4caf50;
      color: white;
    }

    .status-item.cancelled {
      background-color: #d9534f;
      color: white;
    }

    .status-item.returned {
      background-color: #f0ad4e;
      color: white;
    }

    .status-icon {
      font-size: 20px;
      margin-bottom: 5px;
    }

    .status-text {
      font-size: 12px;
      font-weight: bold;
      text-align: center;
    }

    .status-connector {
      flex: 1;
      height: 4px;
      background-color: #ddd;
      transition: background-color 0.3s ease;
    }

    .status-connector.active {
      background-color: #4caf50;
    }

    .status-item.cancelled {
      background-color: #d9534f;
      color: white;
      font-size: 14px;
      font-weight: bold;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .status-item.returned {
      background-color: #f0ad4e;
      color: white;
      font-size: 14px;
      font-weight: bold;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .status-icon {
      font-size: 22px;
      margin-bottom: 8px;
    }

    .status-text {
      font-size: 13px;
      font-weight: bold;
      text-align: center;
      line-height: 1.2;
    }

    /* Product Row Styling */
    .product-row {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
      align-items: flex-start;
    }

    .product-row img {
      width: 120px;
      height: auto;
      border-radius: 8px;
    }

    .product-info {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .product-info h3 {
      margin: 0;
      font-size: 18px;
      color: #333;
    }

    .product-info p {
      margin: 0;
      font-size: 14px;
      color: #666;
    }

    /* Status Container */
    .status-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      margin: 20px 0;
      padding: 15px;
      background-color: #f9f9f9;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .status-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      text-align: center;
      margin: 10px;
      background-color: #ddd;
      transition: all 0.3s ease;
    }

    .status-item.active {
      background-color: #4caf50;
      color: white;
    }

    .status-item.cancelled {
      background-color: #d9534f;
      color: white;
    }

    .status-item.returned {
      background-color: #f0ad4e;
      color: white;
    }

    .status-icon {
      font-size: 20px;
      margin-bottom: 5px;
    }

    .status-text {
      font-size: 12px;
      font-weight: bold;
      text-align: center;
    }

    /* Status Connector */
    .status-connector {
      flex: 1;
      height: 4px;
      background-color: #ddd;
      transition: background-color 0.3s ease;
    }

    .status-connector.active {
      background-color: #4caf50;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .product-row {
        flex-direction: column;
        align-items: center;
        text-align: center;
      }

      .status-container {
        flex-direction: column;
        align-items: center;
        gap: 10px;
      }

      .status-item {
        width: 50px;
        height: 50px;
      }

      .status-text {
        font-size: 10px;
      }

      .status-icon {
        font-size: 18px;
      }
    }
  </style>
  <%- include("../partials/footer.ejs") %>

    <!-- Begin Footer Area -->